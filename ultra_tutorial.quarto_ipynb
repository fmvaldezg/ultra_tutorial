{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Overpass Ultra Tutorial\"\n",
        "author:\n",
        "  name: Felipe Valdez\n",
        "  url: https://felipevaldez.com\n",
        "toc: true\n",
        "toc-title: Contents\n",
        "toc-depth: 3\n",
        "number-sections: true\n",
        "code-annotations: hover\n",
        "format: \n",
        "  html: default\n",
        "  pdf: default\n",
        "format-links: \n",
        "    format: pdf\n",
        "    text: PDF\n",
        "    icon: file-pdf\n",
        "---\n",
        "\n",
        "\n",
        "## What is Ultra?\n",
        "\n",
        "![](./images/ultra-logo.png){width=150px}\n",
        "\n",
        "[Ultra](https://overpass-ultra.us/docs/) (née Overpass Ultra) is a web-application made to simplify making maps with [MapLibre GL JS](https://maplibre.org/maplibre-gl-js/docs/) with data from various file/query types such as Overpass, GeoJSON, GPX, and more.\n",
        "\n",
        "Developed by [Daniel Schep](https://schep.me/)\n",
        "\n",
        "## What is Overpass?\n",
        "\n",
        "![](./images/overpass_logo.png){width=300px}\n",
        "\n",
        "The [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API) is a read-only service that lets users retrieve specific [OpenStreetMap](https://www.openstreetmap.org/) (OSM) data based on custom queries. \n",
        "\n",
        "Unlike OSM’s main API, which focuses on editing, Overpass is optimized for data retrieval, handling anything from a few elements to millions in minutes. \n",
        "\n",
        "Users can filter data by location, object type, tags, and more. Overpass Ultra, a web-based tool, helps with query creation. \n",
        "\n",
        "Refer to the [user manual](https://dev.overpass-api.de/overpass-doc/en/) and [Overpass QL guide](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL) for details.\n",
        "\n",
        "## Building an overpass query\n",
        "\n",
        "In this step-by-step tutorial we will learn how to create, style and share a map in Ultra.\n",
        "\n",
        "We will be creating an interactive map of all recreation areas in Philadelphia.\n",
        "\n",
        "[01]{.badge .rounded-pill .bg-primary} *Open a new map in Ultra*\n",
        "\n",
        "Go to [https://overpass-ultra.us/](https://overpass-ultra.us/).\n",
        "\n",
        "The first time you open the web you will see a default map like this:\n",
        "\n",
        "![](./images/ultra-screen1.png)\n",
        "\n",
        "[02]{.badge .rounded-pill .bg-primary} *Type your query*\n",
        "\n",
        "A `query` is a way to filter and retrieve data from OpenStreetMap. It allows you to search for specific types of map features.\n",
        "\n",
        "Queries in Ultra follow the strcuture of the [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API).\n",
        "\n",
        "If you are not familiar with OpenStreetMap data, see the info window below:\n",
        "\n",
        "::: {.callout-caution collapse=\"true\"}\n",
        "## How data is organized in OSM?\n",
        "All data in OSM is represented by an **element.**\n",
        "\n",
        "An **element** can be either a `node` ![](./images/Osm_element_node.png){width=\"3%\" height=\"auto\"}, a `way` ![](./images/Osm_element_way.png){width=\"3%\" height=\"auto\"} or a `relation` ![](./images/Osm_element_relation.png){width=\"3%\" height=\"auto\"}.\n",
        "\n",
        "Each element is described using `tags` which are the combination of a `key` and a `value` ![](./images/Mf_tag.png){width=\"30px\" height=\"30px\" style=\"background-color: white; padding: 0px\"}.\n",
        "\n",
        "For example, a coffee shop is represented by an element type `node` with tags `amenity=cafe`.\n",
        "\n",
        "Learn more about elements and tags [here.](https://wiki.openstreetmap.org/wiki/Elements)\n",
        ":::\n",
        "\n",
        "**The 'anatomy' of a query:** *Hover over the numbers on the right in the code to reveal what each line on the query does*\n",
        "\n",
        "The following is the default query you see when you open Ultra for the first time:\n",
        "\n",
        "\n",
        "```{qml code-line-numbers=\"true\" code-copy=\"false\"}\n",
        "/*                                              #<1>\n",
        "This is an example Overpass query.              #<1>\n",
        "Try it out by pressing the Run button above!    #<1>\n",
        "*/                                              #<1>\n",
        "[bbox:{{bbox}}];                                #<2>\n",
        "(                                               \n",
        "way[highway=path];                              #<3>\n",
        "way[highway=footway];\n",
        "way[highway=cycleway];\n",
        "way[highway=steps];\n",
        ");                                              #<4>\n",
        "out geom;                                       #<5>\n",
        "```\n",
        "\n",
        "1. This is a comment. Everithing inside `/*  */` will not be considered in teh query.\n",
        "2. This lines defines a `bbox` which limits the query to what you are viewing on the map.\n",
        "3. This line retrieves an element type `way` that has the key `highway` and value `path`.\n",
        "4. All single queries within the `()` are grouped together.\n",
        "5. The output format for your query. In this case `geom` returns the actual shape of the features.\n",
        "\n",
        "For this example we will use the following query.\n",
        "\n",
        "::: {.callout-note}\n",
        "**Remember** to zoom in to your ineterest area. Keep your query area small to retrieve data faster.\n",
        ":::\n",
        "\n",
        "```{.qml .numberLines}\n",
        "[bbox:{{bbox}}];                                #<2>\n",
        "(                                               \n",
        "way[highway=path];                              #<3>\n",
        "way[highway=footway];\n",
        "way[highway=cycleway];\n",
        "way[highway=steps];\n",
        ");                                              #<4>\n",
        "out geom;                                       #<5>\n",
        "```\n",
        "\n",
        "## Styling in ultra\n",
        "\n",
        "## Adding interactivity to the map\n",
        "\n",
        "## Sharing you ultra map"
      ],
      "id": "282c6f1f"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}