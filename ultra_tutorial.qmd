---
title: "Overpass Ultra Tutorial"
author:
  name: Felipe Valdez
  url: https://felipevaldez.com
toc: true
toc-title: Contents
toc-depth: 3
number-sections: true
code-annotations: hover
format: 
  html: default
  pdf: default
##format-links: 
    ##format: pdf
    ##text: PDF
    ##icon: file-pdf
---

## What is Ultra?

![](./images/ultra-logo.png){width=150px}

[Ultra](https://overpass-ultra.us/docs/) (née Overpass Ultra) is a web-application made to simplify making maps with [MapLibre GL JS](https://maplibre.org/maplibre-gl-js/docs/) with data from various file/query types such as Overpass, GeoJSON, GPX, and more.

Developed by [Daniel Schep](https://schep.me/)

## What is Overpass?

![](./images/overpass_logo.png){width=300px}

The [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API) is a read-only service that lets users retrieve specific [OpenStreetMap](https://www.openstreetmap.org/) (OSM) data based on custom queries. 

Unlike OSM’s main API, which focuses on editing, Overpass is optimized for data retrieval, handling anything from a few elements to millions in minutes. 

Users can filter data by location, object type, tags, and more. Overpass Ultra, a web-based tool, helps with query creation. 

Refer to the [user manual](https://dev.overpass-api.de/overpass-doc/en/) and [Overpass QL guide](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL) for details.

## Building an overpass query

In this step-by-step tutorial we will learn how to create, style and share a map in Ultra.

We will be creating an interactive map of all recreation areas in Philadelphia.

[01]{.badge .rounded-pill .bg-primary} *Open a new map in Ultra*

Go to [https://overpass-ultra.us/](https://overpass-ultra.us/).

The first time you open the web you will see a default map like this:

![](./images/ultra-screen1.png)

[02]{.badge .rounded-pill .bg-primary} *Type your query*

A `query` is a way to filter and retrieve data from OpenStreetMap. It allows you to search for specific types of map features.

Queries in Ultra follow the strcuture of the [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API).

If you are not familiar with OpenStreetMap data, see the info window below:

::: {.callout-caution collapse="true"}
## How data is organized in OSM?
All data in OSM is represented by an **element.**

An **element** can be either a `node` ![](./images/Osm_element_node.png){width="3%" height="auto"}, a `way` ![](./images/Osm_element_way.png){width="3%" height="auto"} or a `relation` ![](./images/Osm_element_relation.png){width="3%" height="auto"}.

Each element is described using `tags` which are the combination of a `key` and a `value` ![](./images/Mf_tag.png){width="30px" height="30px" style="background-color: white; padding: 0px"}.

For example, a coffee shop is represented by an element type `node` with tags `amenity=cafe`.

Learn more about elements and tags [here.](https://wiki.openstreetmap.org/wiki/Elements)
:::

**The 'anatomy' of a query:** *Hover over the numbers on the right in the code to reveal what each line on the query does*

The following is the default query you see when you open Ultra for the first time:

```qml {code-line-numbers="true" code-copy="false"}
/*                                              #<1>
This is an example Overpass query.              #<1>
Try it out by pressing the Run button above!    #<1>
*/                                              #<1>
[bbox:{{bbox}}];                                #<2>
(                                               
way[highway=path];                              #<3>
way[highway=footway];
way[highway=cycleway];
way[highway=steps];
);                                              #<4>
out geom;                                       #<5>
```
1. This is a comment. Everithing inside `/*  */` will not be considered in teh query.
2. This lines defines a `bbox` which limits the query to what you are viewing on the map.
3. This line retrieves an element type `way` that has the key `highway` and value `path`.
4. All single queries within the `()` are grouped together.
5. The output format for your query. In this case `geom` returns the actual shape of the features.

For this example we will use the following query.

As there are different types of recreational areas, we will be using a group of three queries with different combinations of value for the key `leisure`.
We will be quering elements tagged: `"leisure":"park"`, `"leisure":"playground"` and `"leisure":"garden"`. There are more tags that can describe this areas. Explore your own case study in [OSM](openstreetmap.org).

::: {.callout-note}
**Remember** to zoom in to your ineterest area. Keep your query area small to retrieve data faster.
:::

```{.qml .numberLines}
[bbox:{{bbox}}];                                #<6>
(                                               #<7>
nwr[leisure="park"];                            #<8>
nwr[leisure="playground"];                      #<9>
nwr[leisure="garden"];                          #<10>
);
out geom;                                       #<11>
```
6. We will keep the `[bbox:{{bbox}}];` line to filter the query to the map view.
7. Here we start our grouped query. As there are different types of areas, we will be using three values.
8. One way to tag recreational areas is `leisure:"park"`. Note that we use `nwr` to get any `node`, `way` or `relation`.
9. Our second query is `leisure:"playground"`.
10. The third type we are quering is `leisure:"garden"`.
11. We close our query retrieving the geomtery of the elements.

[03]{.badge .rounded-pill .bg-primary} *Run your query*

Copy and paste this query in Ultra's query window, and then click 'Run' ![](./images/ultra-run.png)

![](./images/ultra-screen2.png)

After some seconds you will see the results display on the map. All results are shown in yellow. In the next steps we will learn how to style the results. 

Learn more on how to build a query [here]()

## Styling in Ultra

In Ultra, you can style the map elements by adding a `style:` key on a YAML front-matter. This YAML front-matter is a way to add metadata to the query file. All these will be read by Maplibre and Ultra when rendering your resulting map.

[01]{.badge .rounded-pill .bg-primary} *Add a title and description*

The YAML front-matter has to be framed inside `---`, just like in the example below.

```{.xml}
--- #<1>
title: Recreational areas in Philadelphia #<2>
description: Map of all recreational areas in the city of Philadelphia #<3>
--- #<4>
```
1. Opening the YAML front-matter text.
2. Title property to be incldued.
3. Description text to be included.
4. Closing line of the YAML front-matter.

Copy and paste (or type) the YAML front-matter with the title and description properties into the Ultra query we created in the previous section.

Paste the YAML front-matter **before** the query text.

![](./images/ultra-yaml.png){width="420px"}

[02]{.badge .rounded-pill .bg-primary} *Add a custom style*


```{.qml}
---
title: Recreational areas in Philadelphia
description: Map of all recreational areas in the city of Philadelphia
style:
  layers:
    - type: fill
      paint:
        fill-color:
          - case
          - [ ==, [ get, leisure ], "park" ]
          - rgb(159, 247, 7) # green
          - [ ==, [ get, leisure ], "playground" ]
          - rgb(80, 163, 91) # dark gren
          - [ ==, [ get, leisure ], "garden" ]
          - rgb(181, 159, 16) # brown
          - rgb(0, 0, 0)
---
[bbox:{{bbox}}];
(
  nwr[leisure=park];
  nwr[leisure=playground];
  nwr[leisure=garden];
);
out geom;
```

<!--```{=html}
<iframe width="780" height="500" src="https://overpass-ultra.us/#map&m=11.73/39.9686/-75.1661&q=NoIxHsA8C4G9bFAvkgugbgFAApMDsB3AJ2ACIAbAUwEsBnAVyMtIF5SAHAQyIGtSN8xYFTqNKbduU4BPAOZFw9PABN+WQiREMmbWd2WU8azAEosigC4ACWZXABbdEA" title="Quarto Documentation"></iframe>
```
-->

## Adding interactivity to the map

## Sharing you ultra map




## Attribution {.appendix .unnumbered}

<p xmlns:cc="http://creativecommons.org/ns#" xmlns:dct="http://purl.org/dc/terms/"><a property="dct:title" rel="cc:attributionURL" href="http://felipevaldez.com/kobotoolbox_tutorial/">Open Geospatial Data</a> by <a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://felipevaldez.com/">Felipe Valdez</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY-NC-SA 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1" alt=""><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1" alt=""><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/nc.svg?ref=chooser-v1" alt=""><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1" alt=""></a></p>